{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.0.0\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model subclassing and custom training loops"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Coding tutorials\n",
    " #### [1. Model subclassing](#coding_tutorial_1)\n",
    " #### [2. Custom layers](#coding_tutorial_2)\n",
    " #### [3. Automatic differentiation](#coding_tutorial_3)\n",
    " #### [4. Custom training loops](#coding_tutorial_4)\n",
    " #### [5. tf.function decorator](#coding_tutorial_5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_1\"></a>\n",
    "## Model subclassing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Dense, Dropout, Softmax, concatenate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Create a simple model using the model subclassing API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build the model\n",
    "\n",
    "class MyModel(Model):\n",
    "    \n",
    "    def __init__(self):\n",
    "        super(Model, self).__init__()\n",
    "        self.dense_1 = Dense(64, activation='relu')\n",
    "        self.dense_2 = Dense(10)\n",
    "        self.dense_3 = Dense(5)\n",
    "        self.softmax = Softmax()\n",
    "        \n",
    "    def call(self, inputs):\n",
    "        x = self.dense_1(inputs)\n",
    "        y1 = self.dense_2(inputs)\n",
    "        y2 = self.dense_3(y1)\n",
    "        concat = concatenate([x,y2])\n",
    "        return self.softmax(concat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"my_model\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense (Dense)                multiple                  704       \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              multiple                  110       \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              multiple                  55        \n",
      "_________________________________________________________________\n",
      "softmax (Softmax)            multiple                  0         \n",
      "=================================================================\n",
      "Total params: 869\n",
      "Trainable params: 869\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Print the model summary\n",
    "\n",
    "model = MyModel()\n",
    "model(tf.random.uniform([1,10]))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_2\"></a>\n",
    "## Custom layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Layer, Softmax"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Create custom layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(\n",
      "[[-0.04759368 -0.02818753 -0.07532087]\n",
      " [-0.04759368 -0.02818753 -0.07532087]\n",
      " [-0.04759368 -0.02818753 -0.07532087]\n",
      " [-0.04759368 -0.02818753 -0.07532087]\n",
      " [-0.04759368 -0.02818753 -0.07532087]], shape=(5, 3), dtype=float32)\n",
      "[<tf.Variable 'Variable:0' shape=(5, 3) dtype=float32, numpy=\n",
      "array([[ 0.02980972, -0.0066573 , -0.08824725],\n",
      "       [ 0.10086401, -0.03521533, -0.02735695],\n",
      "       [-0.08861563,  0.01640186,  0.00549344],\n",
      "       [-0.06379551, -0.02806373,  0.0097193 ],\n",
      "       [-0.02585626,  0.02534697,  0.02507058]], dtype=float32)>, <tf.Variable 'Variable:0' shape=(5, 3) dtype=float32, numpy=\n",
      "array([[0., 0., 0.],\n",
      "       [0., 0., 0.],\n",
      "       [0., 0., 0.],\n",
      "       [0., 0., 0.],\n",
      "       [0., 0., 0.]], dtype=float32)>]\n"
     ]
    }
   ],
   "source": [
    "# Create a custom layer\n",
    "\n",
    "class MyLayer(Layer):\n",
    "    \n",
    "    def __init__(self, units, input_dim):\n",
    "        super(MyLayer, self).__init__()\n",
    "        self.w = self.add_weight(shape=(input_dim, units), initializer='random_normal')\n",
    "        self.b = self.add_weight(shape=(input_dim, units), initializer='zeros')\n",
    "        \n",
    "    def call(self, inputs):\n",
    "        return tf.matmul(inputs, self.w)+self.b\n",
    "    \n",
    "dense_layer = MyLayer(3,5)\n",
    "x = tf.ones((1,5))\n",
    "print(dense_layer(x))\n",
    "print(dense_layer.weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Specify trainable weights\n",
    "\n",
    "class MyLayer(Layer):\n",
    "    \n",
    "    def __init__(self, units, input_dim):\n",
    "        super(MyLayer, self).__init__()\n",
    "        self.w = self.add_weight(shape=(input_dim, units), initializer='random_normal', trainable=False)\n",
    "        self.b = self.add_weight(shape=(input_dim, units), initializer='zeros')\n",
    "        \n",
    "    def call(self, inputs):\n",
    "        return tf.matmul(inputs, self.w)+self.b\n",
    "    \n",
    "dense_layer = MyLayer(3,5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "trainable weights: 1\n",
      "non-trainable weights: 1\n"
     ]
    }
   ],
   "source": [
    "print('trainable weights:', len(dense_layer.trainable_weights))\n",
    "print('non-trainable weights:', len(dense_layer.non_trainable_weights))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a custom layer to accumulate means of output values\n",
    "\n",
    "class MyLayerMean(Layer):\n",
    "    \n",
    "    def __init__(self, units, input_dim):\n",
    "        super(MyLayerMean, self).__init__()\n",
    "        self.w = self.add_weight(shape=(input_dim, units), initializer='random_normal')\n",
    "        self.b = self.add_weight(shape=(units), initializer='zeros')\n",
    "        self.sum_activation = tf.Variable(initial_value=tf.zeros((units, )), trainable=False) \n",
    "        self.number_call = tf.Variable(initial_value=0, trainable=False) \n",
    "        \n",
    "    def call(self, inputs):\n",
    "        activations = tf.matmul(inputs, self.w)+self.b\n",
    "        self.sum_activation.assign_add(tf.reduce_sum(activations, axis=0))\n",
    "        self.number_call.assign_add(inputs.shape[0])\n",
    "        \n",
    "        return activations, self.sum_activation / tf.cast(self.number_call, tf.float32)\n",
    "    \n",
    "dense_layer = MyLayerMean(3,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.16171634  0.03746652 -0.04390439]\n"
     ]
    }
   ],
   "source": [
    "# Test the layer\n",
    "\n",
    "y, activation_means = dense_layer(tf.ones((1, 5)))\n",
    "print(activation_means.numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a Dropout layer as a custom layer\n",
    "\n",
    "class MyDropout(Layer):\n",
    "\n",
    "    def __init__(self, rate):\n",
    "        super(MyDropout, self).__init__()\n",
    "        self.rate = rate\n",
    "        \n",
    "    def call(self, inputs):\n",
    "        # Define forward pass for dropout layer\n",
    "        return tf.nn.dropout(inputs, rate=self.rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Implement the custom layers into a model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build the model using custom layers with the model subclassing API\n",
    "\n",
    "class MyModel(Model):\n",
    "\n",
    "    def __init__(self, units_1, input_dim_1, units_2, units_3):\n",
    "        super(MyModel, self).__init__()\n",
    "        # Define layers\n",
    "        self.layer_1 = MyLayer(units_1, input_dim_1)\n",
    "        self.dropout_1 = MyDropout(0.5)\n",
    "        self.layer_2 = MyLayer(units_2, units_1)\n",
    "        self.dropout_2 = MyDropout(0.5)\n",
    "        self.layer_3 = MyLayer(units_3, units_2)\n",
    "        self.softmax = Softmax()\n",
    "        \n",
    "    def call(self, inputs):\n",
    "        # Define forward pass\n",
    "        x = self.layer_1(inputs)\n",
    "        x = tf.nn.relu(x)\n",
    "        x = self.dropout_1(x)\n",
    "        x = self.layer_2(x)\n",
    "        x = tf.nn.relu(x)\n",
    "        x = self.dropout_2(x)\n",
    "        x = self.layer_3(x)\n",
    "        \n",
    "        return self.softmax(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(\n",
      "[[0.02333192 0.01513494 0.01334739 0.02152166 0.00788026 0.01602518\n",
      "  0.02760348 0.01451431 0.02952879 0.02528334 0.0164384  0.03135939\n",
      "  0.02267472 0.02835405 0.02466816 0.05619597 0.01690301 0.00632021\n",
      "  0.0215877  0.01558268 0.0139325  0.02719071 0.016213   0.02562374\n",
      "  0.01466317 0.03271756 0.04466028 0.02008292 0.01957454 0.01417962\n",
      "  0.02061353 0.01951672 0.0408253  0.01527379 0.01762533 0.0248242\n",
      "  0.01263746 0.01749541 0.02267366 0.0149923  0.0276777  0.01896122\n",
      "  0.01395346 0.02470995 0.02451094 0.02061547]], shape=(1, 46), dtype=float32)\n",
      "Model: \"my_model_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "my_layer_8 (MyLayer)         multiple                  640064    \n",
      "_________________________________________________________________\n",
      "my_dropout_4 (MyDropout)     multiple                  0         \n",
      "_________________________________________________________________\n",
      "my_layer_9 (MyLayer)         multiple                  4160      \n",
      "_________________________________________________________________\n",
      "my_dropout_5 (MyDropout)     multiple                  0         \n",
      "_________________________________________________________________\n",
      "my_layer_10 (MyLayer)        multiple                  2990      \n",
      "_________________________________________________________________\n",
      "softmax_3 (Softmax)          multiple                  0         \n",
      "=================================================================\n",
      "Total params: 647,214\n",
      "Trainable params: 647,214\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Instantiate a model object\n",
    "\n",
    "model = MyModel(64,10000,64,46)\n",
    "print(model(tf.ones((1, 10000))))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_3\"></a>\n",
    "## Automatic differentiation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Create synthetic data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f8554599828>]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create data from a noise contaminated linear model\n",
    "\n",
    "def MakeNoisyData(m, b, n=20):\n",
    "    x = tf.random.uniform(shape=(n,))\n",
    "    noise = tf.random.normal(shape=(len(x),), stddev=0.1)\n",
    "    y = m * x + b + noise\n",
    "    return x, y\n",
    "\n",
    "m=1\n",
    "b=2\n",
    "x_train, y_train = MakeNoisyData(m,b)\n",
    "plt.plot(x_train, y_train, 'b.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define a linear regression model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(\n",
      "[-0.0359978  -0.04306675 -0.00175681 -0.04157117 -0.04887442 -0.04075335\n",
      " -0.04550667 -0.04281844 -0.0210466  -0.03819093 -0.02355669 -0.041733\n",
      " -0.01841696 -0.01554237 -0.01601288 -0.04567094 -0.01421584 -0.01680387\n",
      " -0.01671087 -0.02426312], shape=(20,), dtype=float32)\n",
      "[<tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([-0.05489286], dtype=float32)>, <tf.Variable 'Variable:0' shape=(1,) dtype=float32, numpy=array([0.], dtype=float32)>]\n"
     ]
    }
   ],
   "source": [
    "# Build a custom layer for the linear regression model\n",
    "\n",
    "class LinearLayer(Layer):\n",
    "    \n",
    "    def __init__(self):\n",
    "        super(LinearLayer, self).__init__()\n",
    "        self.m = self.add_weight(shape=(1,), initializer='random_normal')\n",
    "        self.b = self.add_weight(shape=(1,), initializer='zeros')\n",
    "        \n",
    "    def call(self, inputs):\n",
    "        return self.m*inputs+self.b\n",
    "    \n",
    "linear_regression = LinearLayer()\n",
    "\n",
    "print(linear_regression(x_train))\n",
    "print(linear_regression.weights)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define the loss function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting loss 6.625451\n"
     ]
    }
   ],
   "source": [
    "# Define the mean squared error loss function\n",
    "\n",
    "def SquaredError(y_pred, y_true):\n",
    "    return tf.reduce_mean(tf.square(y_pred - y_true)) \n",
    "\n",
    "starting_loss = SquaredError(linear_regression(x_train), y_train)\n",
    "print(\"Starting loss\", starting_loss.numpy())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train and plot the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step 0, Loss 6.625451\n",
      "Step 1, Loss 5.514263\n",
      "Step 2, Loss 4.591387\n",
      "Step 3, Loss 3.824802\n",
      "Step 4, Loss 3.187941\n",
      "Step 5, Loss 2.658764\n",
      "Step 6, Loss 2.218981\n",
      "Step 7, Loss 1.853418\n",
      "Step 8, Loss 1.549481\n",
      "Step 9, Loss 1.296722\n",
      "Step 10, Loss 1.086467\n",
      "Step 11, Loss 0.911519\n",
      "Step 12, Loss 0.765904\n",
      "Step 13, Loss 0.644662\n",
      "Step 14, Loss 0.543676\n",
      "Step 15, Loss 0.459528\n",
      "Step 16, Loss 0.389379\n",
      "Step 17, Loss 0.330873\n",
      "Step 18, Loss 0.282052\n",
      "Step 19, Loss 0.241290\n",
      "Step 20, Loss 0.207235\n",
      "Step 21, Loss 0.178766\n",
      "Step 22, Loss 0.154949\n",
      "Step 23, Loss 0.135008\n",
      "Step 24, Loss 0.118300\n"
     ]
    }
   ],
   "source": [
    "# Implement a gradient descent training loop for the linear regression model\n",
    "\n",
    "learning_rate = 0.05\n",
    "steps = 25\n",
    "\n",
    "for i in range(steps):\n",
    "    \n",
    "    with tf.GradientTape() as tape:\n",
    "        predictions = linear_regression(x_train)\n",
    "        loss = SquaredError(predictions, y_train)\n",
    "    \n",
    "    gradients = tape.gradient(loss, linear_regression.trainable_variables)\n",
    "    \n",
    "    linear_regression.m.assign_sub(learning_rate * gradients[0])\n",
    "    linear_regression.b.assign_sub(learning_rate * gradients[0])\n",
    "    \n",
    "    print(\"Step %d, Loss %f\" % (i, loss.numpy()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "m:1,  trained m:[1.4122145]\n",
      "b:2,  trained b:[1.4671074]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f85543d9940>]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the learned regression model\n",
    "\n",
    "print(\"m:{},  trained m:{}\".format(m,linear_regression.m.numpy()))\n",
    "print(\"b:{},  trained b:{}\".format(b,linear_regression.b.numpy()))\n",
    "\n",
    "plt.plot(x_train, y_train, 'b.')\n",
    "\n",
    "x_linear_regression=np.linspace(min(x_train), max(x_train),50)\n",
    "plt.plot(x_linear_regression, linear_regression.m*x_linear_regression+linear_regression.b, 'r.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_4\"></a>\n",
    "## Custom training loops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Build the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Layer, Softmax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the custom layers and model\n",
    "\n",
    "class MyLayer(Layer):\n",
    "    \n",
    "    def __init__(self, units):\n",
    "        super(MyLayer, self).__init__()\n",
    "        self.units = units\n",
    "        \n",
    "    def build(self, input_shape):\n",
    "        self.w = self.add_weight(shape=(input_shape[-1], self.units), initializer='random_normal', name='kernel')\n",
    "        self.b = self.add_weight(shape=(self.units,), initializer='zeros', name='bias')\n",
    "        \n",
    "    def call(self, inputs):\n",
    "        return tf.matmul(inputs, self.w)+self.b\n",
    "    \n",
    "class MyDropout(Layer):\n",
    "\n",
    "    def __init__(self, rate):\n",
    "        super(MyDropout, self).__init__()\n",
    "        self.rate = rate\n",
    "        \n",
    "    def call(self, inputs):\n",
    "        # Define forward pass for dropout layer\n",
    "        return tf.nn.dropout(inputs, rate=self.rate)\n",
    "    \n",
    "class MyModel(Model):\n",
    "\n",
    "    def __init__(self, units_1, units_2, units_3):\n",
    "        super(MyModel, self).__init__()\n",
    "        # Define layers\n",
    "        self.layer_1 = MyLayer(units_1)\n",
    "        self.dropout_1 = MyDropout(0.5)\n",
    "        self.layer_2 = MyLayer(units_2)\n",
    "        self.dropout_2 = MyDropout(0.5)\n",
    "        self.layer_3 = MyLayer(units_3)\n",
    "        self.softmax = Softmax()\n",
    "        \n",
    "    def call(self, inputs):\n",
    "        # Define forward pass\n",
    "        x = self.layer_1(inputs)\n",
    "        x = tf.nn.relu(x)\n",
    "        x = self.dropout_1(x)\n",
    "        x = self.layer_2(x)\n",
    "        x = tf.nn.relu(x)\n",
    "        x = self.dropout_2(x)\n",
    "        x = self.layer_3(x)\n",
    "        \n",
    "        return self.softmax(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(\n",
      "[[0.00226156 0.00211605 0.00371357 0.01336723 0.06120576 0.02319663\n",
      "  0.03068146 0.03594247 0.03372199 0.03046744 0.03047882 0.00142877\n",
      "  0.00663465 0.00103526 0.0028282  0.01270744 0.00674424 0.02183614\n",
      "  0.01193874 0.02182493 0.01703416 0.00885782 0.01101636 0.02107927\n",
      "  0.02437948 0.00911448 0.04391968 0.00166173 0.00770334 0.0017563\n",
      "  0.00362069 0.00376754 0.00302946 0.00898445 0.07720418 0.1895869\n",
      "  0.00573777 0.04545243 0.01145617 0.02688361 0.00525898 0.00285096\n",
      "  0.00273627 0.01209388 0.02537805 0.07530471]], shape=(1, 46), dtype=float32)\n",
      "Model: \"my_model_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "my_layer_11 (MyLayer)        multiple                  640064    \n",
      "_________________________________________________________________\n",
      "my_dropout_6 (MyDropout)     multiple                  0         \n",
      "_________________________________________________________________\n",
      "my_layer_12 (MyLayer)        multiple                  4160      \n",
      "_________________________________________________________________\n",
      "my_dropout_7 (MyDropout)     multiple                  0         \n",
      "_________________________________________________________________\n",
      "my_layer_13 (MyLayer)        multiple                  2990      \n",
      "_________________________________________________________________\n",
      "softmax_4 (Softmax)          multiple                  0         \n",
      "=================================================================\n",
      "Total params: 647,214\n",
      "Trainable params: 647,214\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Instantiate the model object\n",
    "\n",
    "model = MyModel(64,64,46)\n",
    "print(model(tf.ones((1, 10000))))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load the reuters dataset and define the class_names "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "\n",
    "from tensorflow.keras.datasets import reuters\n",
    "\n",
    "(train_data, train_labels), (test_data, test_labels) = reuters.load_data(num_words=10000)\n",
    "\n",
    "class_names = ['cocoa','grain','veg-oil','earn','acq','wheat','copper','housing','money-supply',\n",
    "   'coffee','sugar','trade','reserves','ship','cotton','carcass','crude','nat-gas',\n",
    "   'cpi','money-fx','interest','gnp','meal-feed','alum','oilseed','gold','tin',\n",
    "   'strategic-metal','livestock','retail','ipi','iron-steel','rubber','heat','jobs',\n",
    "   'lei','bop','zinc','orange','pet-chem','dlr','gas','silver','wpi','hog','lead']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label: earn\n"
     ]
    }
   ],
   "source": [
    "# Print the class of the first sample\n",
    "\n",
    "print(\"Label: {}\".format(class_names[train_labels[0]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Get the dataset word index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the Reuters word index\n",
    "\n",
    "word_to_index = reuters.get_word_index()\n",
    "\n",
    "invert_word_index = dict([(value, key) for (key, value) in word_to_index.items()])\n",
    "text_news = ' '.join([invert_word_index.get(i - 3, '?') for i in train_data[0]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "? ? ? said as a result of its december acquisition of space co it expects earnings per share in 1987 of 1 15 to 1 30 dlrs per share up from 70 cts in 1986 the company said pretax net should rise to nine to 10 mln dlrs from six mln dlrs in 1986 and rental operation revenues to 19 to 22 mln dlrs from 12 5 mln dlrs it said cash flow per share this year should be 2 50 to three dlrs reuter 3\n"
     ]
    }
   ],
   "source": [
    "# Print the first data example sentence\n",
    "\n",
    "print(text_news)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Preprocess the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x_train: (8982, 10000)\n",
      "Shape of x_test: (2246, 10000)\n"
     ]
    }
   ],
   "source": [
    "# Define a function that encodes the data into a 'bag of words' representation\n",
    "\n",
    "def bag_of_words(text_samples, elements=10000):\n",
    "    output = np.zeros((len(text_samples), elements))\n",
    "    for i, word in enumerate(text_samples):\n",
    "        output[i, word] = 1.\n",
    "    return output\n",
    "\n",
    "x_train = bag_of_words(train_data)\n",
    "x_test = bag_of_words(test_data)\n",
    "\n",
    "print(\"Shape of x_train:\", x_train.shape)\n",
    "print(\"Shape of x_test:\", x_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define the loss function and optimizer\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the categorical cross entropy loss and Adam optimizer\n",
    "\n",
    "loss_object = tf.keras.losses.SparseCategoricalCrossentropy()\n",
    "\n",
    "def loss(model, x, y, wd):\n",
    "    kernel_variables = []\n",
    "    for l in model.layers:\n",
    "        for w in l.weights:\n",
    "            if 'kernel' in w.name:\n",
    "                kernel_variables.append(w)\n",
    "    wd_penalty = wd * tf.reduce_sum([tf.reduce_sum(tf.square(k)) for k in kernel_variables])\n",
    "    y_ = model(x)\n",
    "    return loss_object(y_true=y, y_pred=y_) + wd_penalty\n",
    "\n",
    "optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a function to compute the forward and backward pass\n",
    "\n",
    "def grad(model, inputs, targets, wd):\n",
    "    with tf.GradientTape() as tape:\n",
    "        loss_value = loss(model, inputs, targets, wd)\n",
    "    return loss_value, tape.gradient(loss_value, model.trainable_variables)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Layer my_model_4 is casting an input tensor from dtype float64 to the layer's dtype of float32, which is new behavior in TensorFlow 2.  The layer has dtype float32 because it's dtype defaults to floatx.\n",
      "\n",
      "If you intended to run this layer in float32, you can safely ignore this warning. If in doubt, this warning is likely only an issue if you are porting a TensorFlow 1.X model to TensorFlow 2.\n",
      "\n",
      "To change all layers to have dtype float64 by default, call `tf.keras.backend.set_floatx('float64')`. To change just this layer, pass dtype='float64' to the layer constructor. If you are the author of this layer, you can disable autocasting by passing autocast=False to the base Layer constructor.\n",
      "\n",
      "Epoch 000: Loss: 3.307, Accuracy: 48.141%\n",
      "Epoch 001: Loss: 1.907, Accuracy: 61.790%\n",
      "Epoch 002: Loss: 1.832, Accuracy: 65.976%\n",
      "Epoch 003: Loss: 1.776, Accuracy: 68.392%\n",
      "Epoch 004: Loss: 1.760, Accuracy: 68.882%\n",
      "Epoch 005: Loss: 1.734, Accuracy: 69.483%\n",
      "Epoch 006: Loss: 1.732, Accuracy: 69.962%\n",
      "Epoch 007: Loss: 1.727, Accuracy: 70.252%\n",
      "Epoch 008: Loss: 1.702, Accuracy: 70.508%\n",
      "Epoch 009: Loss: 1.708, Accuracy: 70.341%\n",
      "Duration :316.846\n"
     ]
    }
   ],
   "source": [
    "# Implement the training loop\n",
    "\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "start_time = time.time()\n",
    "\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((x_train, train_labels))    \n",
    "train_dataset = train_dataset.batch(32) \n",
    "\n",
    "# Keep results for plotting\n",
    "train_loss_results = []\n",
    "train_accuracy_results = []\n",
    "\n",
    "num_epochs = 10\n",
    "weight_decay = 0.005\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    \n",
    "    epoch_loss_avg = tf.keras.metrics.Mean()\n",
    "    epoch_accuracy = tf.keras.metrics.CategoricalAccuracy()\n",
    "    \n",
    "    # Training loop\n",
    "    for x, y in train_dataset:\n",
    "        # Optimize the model\n",
    "        loss_value, grads = grad(model, x, y, weight_decay)\n",
    "        optimizer.apply_gradients(zip(grads, model.trainable_variables))\n",
    "        \n",
    "        # Compute Current Loss\n",
    "        epoch_loss_avg(loss_value)\n",
    "        # Compare predicted label to actual label\n",
    "        epoch_accuracy(to_categorical(y), model(x))\n",
    "\n",
    "    # End Epoch\n",
    "    train_loss_results.append(epoch_loss_avg.result())\n",
    "    train_accuracy_results.append(epoch_accuracy.result())\n",
    "    \n",
    "    print(\"Epoch {:03d}: Loss: {:.3f}, Accuracy: {:.3%}\".format(epoch, epoch_loss_avg.result(), epoch_accuracy.result()))\n",
    "print(\"Duration :{:.3f}\".format(time.time() - start_time))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Evaluate the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a Dataset object for the test set\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((x_test, test_labels))\n",
    "test_dataset = test_dataset.batch(32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Collect average loss and accuracy\n",
    "\n",
    "epoch_loss_avg = tf.keras.metrics.Mean()\n",
    "epoch_accuracy = tf.keras.metrics.CategoricalAccuracy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss: 1.820\n",
      "Test accuracy: 67.320%\n"
     ]
    }
   ],
   "source": [
    "# Loop over the test set and print scores\n",
    "\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "for x, y in test_dataset:\n",
    "    # Optimize the model\n",
    "    loss_value = loss(model, x, y, weight_decay)    \n",
    "    # Compute current loss\n",
    "    epoch_loss_avg(loss_value)  \n",
    "    # Compare predicted label to actual label\n",
    "    epoch_accuracy(to_categorical(y), model(x))\n",
    "\n",
    "print(\"Test loss: {:.3f}\".format(epoch_loss_avg.result().numpy()))\n",
    "print(\"Test accuracy: {:.3%}\".format(epoch_accuracy.result().numpy()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the learning curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training loss and accuracy\n",
    "\n",
    "fig, axes = plt.subplots(2, sharex=True, figsize=(12, 8))\n",
    "fig.suptitle('Training Metrics')\n",
    "\n",
    "axes[0].set_ylabel(\"Loss\", fontsize=14)\n",
    "axes[0].plot(train_loss_results)\n",
    "\n",
    "axes[1].set_ylabel(\"Accuracy\", fontsize=14)\n",
    "axes[1].set_xlabel(\"Epoch\", fontsize=14)\n",
    "axes[1].plot(train_accuracy_results)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Predict from the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction: earn\n",
      "     Label: earn\n"
     ]
    }
   ],
   "source": [
    "# Get the model prediction for an example input\n",
    "\n",
    "predicted_label = np.argmax(model(x_train[np.newaxis,0]),axis=1)[0]\n",
    "print(\"Prediction: {}\".format(class_names[predicted_label]))\n",
    "print(\"     Label: {}\".format(class_names[train_labels[0]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_5\"></a>\n",
    "## tf.function decorator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Layer, Softmax\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from tensorflow.keras.datasets import reuters\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Build the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize a new model\n",
    "\n",
    "model = MyModel(64,64,46)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Redefine the grad function using the @tf.function decorator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use the @tf.function decorator\n",
    "\n",
    "@tf.function\n",
    "def grad(model, inputs, targets, wd):\n",
    "    with tf.GradientTape() as tape:\n",
    "        loss_value = loss(model, inputs, targets, wd)\n",
    "    return loss_value, tape.gradient(loss_value, model.trainable_variables)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Layer my_model_5 is casting an input tensor from dtype float64 to the layer's dtype of float32, which is new behavior in TensorFlow 2.  The layer has dtype float32 because it's dtype defaults to floatx.\n",
      "\n",
      "If you intended to run this layer in float32, you can safely ignore this warning. If in doubt, this warning is likely only an issue if you are porting a TensorFlow 1.X model to TensorFlow 2.\n",
      "\n",
      "To change all layers to have dtype float64 by default, call `tf.keras.backend.set_floatx('float64')`. To change just this layer, pass dtype='float64' to the layer constructor. If you are the author of this layer, you can disable autocasting by passing autocast=False to the base Layer constructor.\n",
      "\n",
      "Epoch 000: Loss: 3.304, Accuracy: 49.009%\n",
      "Epoch 001: Loss: 1.923, Accuracy: 61.200%\n",
      "Epoch 002: Loss: 1.831, Accuracy: 65.420%\n",
      "Epoch 003: Loss: 1.783, Accuracy: 66.633%\n",
      "Epoch 004: Loss: 1.760, Accuracy: 68.726%\n",
      "Epoch 005: Loss: 1.739, Accuracy: 69.094%\n",
      "Epoch 006: Loss: 1.728, Accuracy: 69.606%\n",
      "Epoch 007: Loss: 1.727, Accuracy: 69.829%\n",
      "Epoch 008: Loss: 1.712, Accuracy: 70.240%\n",
      "Epoch 009: Loss: 1.699, Accuracy: 70.274%\n",
      "Duration :280.192\n"
     ]
    }
   ],
   "source": [
    "# Re-run the training loop\n",
    "\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "start_time = time.time()\n",
    "\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((x_train, train_labels))    \n",
    "train_dataset = train_dataset.batch(32) \n",
    "\n",
    "# Keep results for plotting\n",
    "train_loss_results = []\n",
    "train_accuracy_results = []\n",
    "\n",
    "num_epochs = 10\n",
    "weight_decay = 0.005\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    \n",
    "    epoch_loss_avg = tf.keras.metrics.Mean()\n",
    "    epoch_accuracy = tf.keras.metrics.CategoricalAccuracy()\n",
    "    \n",
    "    # Training loop\n",
    "    for x, y in train_dataset:\n",
    "        # Optimize the model\n",
    "        loss_value, grads = grad(model, x, y, weight_decay)\n",
    "        optimizer.apply_gradients(zip(grads, model.trainable_variables))\n",
    "        \n",
    "        # Compute Current Loss\n",
    "        epoch_loss_avg(loss_value)\n",
    "        # Compare predicted label to actual label\n",
    "        epoch_accuracy(to_categorical(y), model(x))\n",
    "\n",
    "    # End Epoch\n",
    "    train_loss_results.append(epoch_loss_avg.result())\n",
    "    train_accuracy_results.append(epoch_accuracy.result())\n",
    "    \n",
    "    print(\"Epoch {:03d}: Loss: {:.3f}, Accuracy: {:.3%}\".format(epoch, epoch_loss_avg.result(), epoch_accuracy.result()))\n",
    "print(\"Duration :{:.3f}\".format(time.time() - start_time))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Print the autograph code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "def tf__grad(model, inputs, targets, wd):\n",
      "  do_return = False\n",
      "  retval_ = ag__.UndefinedReturnValue()\n",
      "  with ag__.FunctionScope('grad', 'grad_scope', ag__.ConversionOptions(recursive=True, user_requested=True, optional_features=(), internal_convert_user_code=True)) as grad_scope:\n",
      "    with tf.GradientTape() as tape:\n",
      "      loss_value = ag__.converted_call(loss, grad_scope.callopts, (model, inputs, targets, wd), None, grad_scope)\n",
      "    do_return = True\n",
      "    retval_ = grad_scope.mark_return_value((loss_value, ag__.converted_call(tape.gradient, grad_scope.callopts, (loss_value, model.trainable_variables), None, grad_scope)))\n",
      "  do_return,\n",
      "  return ag__.retval(retval_)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Use tf.autograph.to_code to see the generated code\n",
    "\n",
    "print(tf.autograph.to_code(grad.python_function))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
